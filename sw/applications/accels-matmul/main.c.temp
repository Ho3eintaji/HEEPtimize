// Copyright 2022 EPFL and Politecnico di Torino.
// Solderpad Hardware License, Version 2.1, see LICENSE.md for details.
// SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1
//
// File: main.c
// Author: Michele Caon
// Date: 22/06/2023
// Description: Main file for the matrix multiplication application

#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include "heepatia.h"
#include "csr.h"
#include "fast_intr_ctrl.h"
#include "dma_util.h"
#include "vcd_util.h"
#include "timer_util.h"
#include "ext_irq.h"
#include "handler.h"
#include "rv_plic.h"
#include "rv_plic_regs.h"
#include "hart.h"
#include "transformer.h"
#include "cgra_bitstream.h"
#include "carus.h"
#include "carus_matmul.h"
#include "cgra.h"

#include "data.h"
#include "data_carus.h"

#define PRINT_SUCCESS_MSG
#define PRINT_RESULT
#define PRINT_TIMING_DETAILS

#ifdef POWER_SIM
#pragma message "Power simulation ENABLED: disabling verification checks"
#endif

//todo: remove
int32_t outSW[ROWS_C*COLS_C];

data_t R_cpu[R_ROWS*R_COLS] __attribute__((section(".xheep_data_interleaved"))); // Result computed by the CPU
void __attribute__((noinline, aligned(4))) cpuMatMul(data_t *A, data_t *B, data_t *R_cpu, unsigned int a_rows, unsigned int a_cols, unsigned int b_cols);

// Handler for the CGRA interruption
void handler_irq_cgra(uint32_t id);

// void fillMatrixInputs();

data_t R_CGRA[R_ROWS*R_COLS];

// Size of the input buffer for the CGRA
#define CGRA_COL_INPUT_SIZE 4


// Plic controller variables
volatile bool               cgra_intr_flag;
// CGRA variables
static cgra_t               cgra;
static uint8_t              cgra_slot;

// CGRA input and output buffers
static int32_t cgra_input[CGRA_N_COLS][CGRA_COL_INPUT_SIZE]    __attribute__ ((aligned (4)));

int main(void)
{
    // fillMatrixInputs();

    uint32_t cpu_cycles = 0;
    uint32_t nmc_cycles = 0;
    uint32_t nmc_init_cycles = 0;
    uint32_t nmc_load_cycles = 0;
    uint32_t nmc_data_move_cycles = 0;
    uint32_t nmc_compute_cycles = 0;
    uint32_t cgra_cycles = 0;
    uint32_t cgra_init_cycles = 0;
    uint32_t cgra_load_cycles = 0;
    uint32_t cgra_data_move_cycles = 0;
    uint32_t cgra_compute_cycles = 0;
    timer_init();


    carus_cfg_t cfg = CARUS_CFG_INIT; // NM-Carus configuration
    dma_data_type_t dma_type = DMA_DATA_TYPE_WORD;
    data_t *row_ptr;
    unsigned int a_rows = A_ROWS;
    unsigned int a_cols = A_COLS;
    unsigned int b_cols = B_COLS;

    

    // System initialization
    // ---------------------
    // Enable fast interrupts for DMA and PLIC
    if (enable_fast_interrupt(kDma_fic_e, true) != kFastIntrCtrlOk_e)
        return 1;
    // CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    // const uint32_t mask = (1 << 19) | (1 << 11); // 19: DMA, 11: PLIC
    // CSR_SET_BITS(CSR_REG_MIE, mask); // MIE.meie = 1

    // Initialize PLIC for external NM-Carus interrupt
    if (ext_irq_init() != 0) return 1; // Wrap everything for EXT_INTR_0 (carus one)

    // now for EXT_INTR_1 (cgra one)
    // plic_Init();
    plic_irq_set_priority(CGRA_INTR, 1);
    plic_irq_set_enabled(CGRA_INTR, kPlicToggleEnabled);
    plic_assign_external_irq_handler( CGRA_INTR, (void *) &handler_irq_cgra);

    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    const uint32_t mask = (1 << 19) | (1 << 11); // 19: DMA, 11: PLIC
    CSR_SET_BITS(CSR_REG_MIE, mask); // MIE.meie = 1

    cgra_intr_flag = 0;



    // Initialize the DMA
    dma_init(NULL);

    // Initialize the VCD trigger
    if (vcd_init() != 0) return 1;

    // Initialize NM-Carus
    // ------------------
    timer_start();
    // Initialize NM-Carus
    if (carus_init(0) != 0) return 1;
    nmc_init_cycles = timer_stop();

    timer_start();
    // Load kernel
    if (carus_load_kernel(0, carus_matmul, CARUS_MATMUL_SIZE, NULL) != 0)
        return 1;

    // Set kernel configuration configuration
    cfg.vl = VL;
    switch (ELEM_SIZE)
    {
    case 1: 
        cfg.vtype = VTYPE_VSEW_8; 
        dma_type = DMA_DATA_TYPE_BYTE;
        break;
    case 2: 
        cfg.vtype = VTYPE_VSEW_16; 
        dma_type = DMA_DATA_TYPE_HALF_WORD;
        break;
    case 4: 
        cfg.vtype = VTYPE_VSEW_32; 
        dma_type = DMA_DATA_TYPE_WORD;
        break;
    
    default: return 1;
    }

    cfg.arg0 = ARG0; // n. rows of A
    cfg.arg1 = ARG1; // n. columns of A

    // Write kernel configuration
    if (carus_set_cfg(0, &cfg) != 0)
        return 1;
    nmc_load_cycles = timer_stop();

    // Transfer data to NM-Carus
    // -------------------------
    timer_start();
    // Copy flattened matrix A
    row_ptr = (data_t *) (CARUS0_START_ADDRESS + vregs[CARUS_MATMUL_A_VREG]);
    if (dma_copy((uint8_t *) row_ptr, (uint8_t *) A, A_SIZE, dma_type) != 0)
        return 1;
    
    // Copy matrix B
    for (unsigned int i = 0; i < B_ROWS; i++) {
        row_ptr = CARUS0_START_ADDRESS + vregs[CARUS_MATMUL_B_VREG + i];
        if (dma_copy((uint8_t *) row_ptr, (uint8_t *) (B+i*B_COLS), B_COLS * ELEM_SIZE, dma_type) != 0)
            return 1;
    }
    nmc_data_move_cycles = timer_stop();

    // Run the kernel
    // --------------
    timer_start();
    // Run the kernel
    if (carus_run_kernel(0) != 0)
        return 1;

    // Enable VCD dump
    vcd_enable();

    // Wait for the kernel to complete
    if (carus_wait_done(0) != 0)
        return 1;

    // Disable VCD dump
    vcd_disable();
    nmc_compute_cycles = timer_stop();

    nmc_cycles = nmc_init_cycles + nmc_load_cycles + nmc_data_move_cycles + nmc_compute_cycles;

    printf("NM-Carus matrix multiplication done\n");

    



    timer_start();
    // Load kernel
    cgra_cmem_init(cgra_imem_bitstream, cgra_kmem_bitstream);
    cgra.base_addr = mmio_region_from_addr((uintptr_t)OECGRA_CONFIG_REGS_START_ADDRESS);
    // Select request slot of CGRA
    cgra_slot = cgra_get_slot(&cgra);

    printf("kir1\n");

    // Col 0: &B[0][0], nItLoopColsC, &A[0][0], &C[0][3]
    cgra_input[0][0] =  &B[0];   //&matrixB[0];
    cgra_input[0][1] = COLS_C/CGRA_N_ROWS;
    cgra_input[0][2] = &A[0]; //&matrixA[0];
    cgra_input[0][3] = &R_CGRA[3];//&matrixC[3];
    // Col 1: &C[1][0], &B[0][1], nItLoopsColsA, &A[1][0]
    cgra_input[1][0] = &R_CGRA[COLS_C];
    cgra_input[1][1] = &B[1];
    cgra_input[1][2] = COLS_A;
    cgra_input[1][3] = &A[COLS_A];
    // Col 2: &A[2][0], &C[2][1], &B[0][2], nItLoopColsC
    cgra_input[2][0] = &A[2*COLS_A];
    cgra_input[2][1] = &R_CGRA[2*COLS_C+1];
    cgra_input[2][2] = &B[2];
    cgra_input[2][3] = COLS_C/CGRA_N_ROWS;
    // Col 3: nItLoopRowsC, &A[3][0], &C[3][2], &B[0][3], 
    cgra_input[3][0] = ROWS_C/CGRA_N_COLS;
    cgra_input[3][1] = &A[3*COLS_A];
    cgra_input[3][2] = &R_CGRA[3*COLS_C+2];
    cgra_input[3][3] = &B[3];

    //     // Col 0: &B[0][0], nItLoopColsC, &A[0][0], &C[0][3]
    // cgra_input[0][0] = &matrixB[0];
    // cgra_input[0][1] = COLS_C/CGRA_N_ROWS;
    // cgra_input[0][2] = &matrixA[0];
    // cgra_input[0][3] = &matrixC[3];
    // // Col 1: &C[1][0], &B[0][1], nItLoopsColsA, &A[1][0]
    // cgra_input[1][0] = &matrixC[COLS_C];
    // cgra_input[1][1] = &matrixB[1];
    // cgra_input[1][2] = COLS_A;
    // cgra_input[1][3] = &matrixA[COLS_A];
    // // Col 2: &A[2][0], &C[2][1], &B[0][2], nItLoopColsC
    // cgra_input[2][0] = &matrixA[2*COLS_A];
    // cgra_input[2][1] = &matrixC[2*COLS_C+1];
    // cgra_input[2][2] = &matrixB[2];
    // cgra_input[2][3] = COLS_C/CGRA_N_ROWS;
    // // Col 3: nItLoopRowsC, &A[3][0], &C[3][2], &B[0][3], 
    // cgra_input[3][0] = ROWS_C/CGRA_N_COLS;
    // cgra_input[3][1] = &matrixA[3*COLS_A];
    // cgra_input[3][2] = &matrixC[3*COLS_C+2];
    // cgra_input[3][3] = &matrixB[3];

    // Set CGRA kernel L/S pointers
    for(int col_idx = 0 ; col_idx < CGRA_N_COLS ; col_idx++){
      cgra_set_read_ptr ( &cgra, cgra_slot, (uint32_t) cgra_input[col_idx], col_idx );
    }
    cgra_load_cycles = timer_stop();

    // printf("kir2\n");

    // CGRA Execution
    timer_start();
    cgra_intr_flag = 0;
    cgra_set_kernel( &cgra, cgra_slot, TRANSFORMER );

    printf("kir3\n");
    for(int i=0; i<10000;i++){
        //nop

    }
    // Wait until CGRA is done
    while(cgra_intr_flag==0) {
      wait_for_interrupt();
    }
    printf("kir4\n");
    cgra_compute_cycles = timer_stop();
    cgra_cycles = cgra_init_cycles + cgra_load_cycles + cgra_data_move_cycles + cgra_compute_cycles;

    printf("cgra matrix multiplication done\n");

    

    // Compute the matmul on the CPU
    // -----------------------------
    // Enable VCD dump and counter
    vcd_enable();
    timer_start();
    // Compute result on the CPU
    cpuMatMul(A, B, R_cpu, a_rows, a_cols, b_cols);
    // Stop timer and disable VCD dump
    cpu_cycles = timer_stop();
    vcd_disable();

    printf("CPU matrix multiplication done\n");

    // Skip verification part when running power simulation
#ifdef POWER_SIM
    return 0;
#endif

    // Check the output data
    // ---------------------
    // Check NM-Carus output data
    for (unsigned int i = 0; i < R_ROWS; i++) {
        row_ptr = (data_t *) (CARUS0_START_ADDRESS + vregs[CARUS_MATMUL_R_VREG + i]);
        for (unsigned int j = 0; j < R_COLS; j++) {
            if (row_ptr[j] != R[i*R_COLS+j]) {
                printf("NMC|gold R[%u,%u]: %x %x\n", i, j, row_ptr[j], R[i*R_COLS+j]);
                return 1;
            }
            if (R_cpu[i*R_COLS+j] != R[i*R_COLS+j]) {
                printf("CPU|gold R[%u,%u]: %x %x\n", i, j, R_cpu[i*R_COLS+j], R[i*R_COLS+j]);
                return 1;
            }
        }
    }
#ifdef PRINT_SUCCESS_MSG
    printf("Success\n");
#endif

// print cgra, nm-carus and cpu results
#ifdef PRINT_RESULT
    printf("NM-Carus result:\n");
    for (unsigned int i = 0; i < R_ROWS; i++) {
        row_ptr = (data_t *) (CARUS0_START_ADDRESS + vregs[CARUS_MATMUL_R_VREG + i]);
        for (unsigned int j = 0; j < R_COLS; j++) {
            printf("%x \n", row_ptr[j]);
        }
        printf("\n");
    }

    printf("CGRA result:\n");
    for (unsigned int i = 0; i < R_ROWS; i++) {
        for (unsigned int j = 0; j < R_COLS; j++) {
            printf("%x \n", R_CGRA[i*R_COLS+j]);
        }
        printf("\n");
    }

    printf("CPU result:\n");
    for (unsigned int i = 0; i < R_ROWS; i++) {
        for (unsigned int j = 0; j < R_COLS; j++) {
            printf("%x \n", R_cpu[i*R_COLS+j]);
        }
        printf("\n");
    }
#endif

#ifdef PRINT_TIMING_DETAILS
    // information about application
    printf("========================================\n");
    printf("NM-Carus matrix multiplication\n");
    printf("========================================\n");

    // printf matrix size
    printf("Matrix size: %u x %u * %u x %u\n", a_rows, a_cols, a_cols, b_cols);

    // printf all timing details
    printf("NMC init cycles: %u\n", nmc_init_cycles);
    printf("NMC load cycles: %u\n", nmc_load_cycles);
    printf("NMC data move cycles: %u\n", nmc_data_move_cycles);
    printf("NMC compute cycles: %u\n", nmc_compute_cycles);
    printf("NMC total cycles: %u\n", nmc_cycles);
    printf("CPU cycles: %u\n", cpu_cycles);
#endif

    // Return success
    return 0;
}

// void fillMatrixInputs(){
//   for(int i = 0; i < ROWS_A; i++){
//     for(int j=0; j < COLS_A; j++){
//       matrixA[i*COLS_A+j] = (i*COLS_A+j+1)%100;
//     }
//   }

//   for(int i = 0; i < ROWS_B; i++){
//     for(int j=0;j < COLS_B; j++){
//       matrixB[i*COLS_B+j] = (i*COLS_B+j+1)%100;
//     }
//   }
// }


void cpuMatMul(data_t *A, data_t *B, data_t *R_cpu, unsigned int a_rows, unsigned int a_cols, unsigned int b_cols)
{
    for (unsigned int i = 0; i < a_rows; i++) {
        for (unsigned int j = 0; j < b_cols; j++) {
            R_cpu[i*b_cols+j] = 0;
            for (unsigned int k = 0; k < a_cols; k++) {
                R_cpu[i*b_cols+j] += A[i*a_cols+k] * B[k*b_cols+j];
            }
        }
    }
}

// Interrupt controller variables
void handler_irq_cgra(uint32_t id) {
  cgra_intr_flag = 1;
}