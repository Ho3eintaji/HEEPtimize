
# JTAG CLOCK: 25 MHz
set JTAG_CLK_PERIOD 40

# REF CLOCK: 32769 Hz
set REF_CLK_PERIOD 30517

# SYSTEM CLOCK generated by the FLL: 500 MHz (the FLL can go higher?)
set FLL_CLK_PERIOD 2

# SPI CLOCK connected to the flash : ~150MHz
# This clock is a divided version of the system clock and depends on the actual hardware (possible clock divider)
# This values is set according to the "divide_by" value	below
set SPI_FLASH_CLK_PERIOD 6.7

# SPI CLOCK for external devices : ~150MHz
# This clock is	a divided version of the system	clock and depends on the actual	hardware (possible clock divider)
# This values is set according to the "divide_by" value below
set SPI_CLK_PERIOD 6.7

# I2C CLOCK for external devices : ??MHz
# I2C IP NOT TESTED YET
# set I2C_CLK_PERIOD ?

# SYSTEM CLOCK bypassed with REF CLOCK case set to 0
set_case_analysis 0 [ get_pin u_heepatia_peripherals/u_fll_subsystem/clk_mux_fll_soc_i/clk_sel_i ]

# JTAG CLOCK
# Warning: It is dangerous to create a clock source on inout port 'jtag_tck_i'. (UID-376)
create_clock -name "JTAG_CLK" -period $JTAG_CLK_PERIOD [ get_ports jtag_tck_i ]

# REF CLOCK
# Warning: It is dangerous to create a clock source on inout port 'ref_clk_i'. (UID-376)
create_clock -name "REF_CLK" -period $REF_CLK_PERIOD [ get_ports ref_clk_i ]

# FLL CLOCK
create_clock -name "FLL_CLK" -period $FLL_CLK_PERIOD [ get_pins u_heepatia_peripherals/u_fll_subsystem/u_fll_wrapper/fll_i/FLLCLK ]

# SYSTEM CLOCK
create_generated_clock [ get_pin u_heepatia_peripherals/u_fll_subsystem/clk_mux_fll_soc_i/clk_o ] \
                        -name SYSTEM_CLK -source [ get_pins u_heepatia_peripherals/u_fll_subsystem/u_fll_wrapper/fll_i/FLLCLK ] -divide_by 1

# SPI subsystem connected to flash
# # Yosis SPI
# create_generated_clock [ get_pins u_core_v_mini_mcu/ao_peripheral_subsystem_i/spi_subsystem_i/obi_spimemio_i/spimemio_i/xfer/flash_clk_reg/Q ] \
#                         -name SPI_MEMIO_FLASH_CLK -source [ get_pin u_heepatia_peripherals/u_fll_subsystem/clk_mux_fll_soc_i/clk_o ] -divide_by 6
# # OT SPI host
# create_generated_clock [ get_pins u_core_v_mini_mcu/ao_peripheral_subsystem_i/spi_subsystem_i/ot_spi_i/u_spi_core/u_fsm/sck_q_reg/Q ] \
#                         -name SPI_HOST_FLASH_CLK -source [ get_pin u_heepatia_peripherals/u_fll_subsystem/clk_mux_fll_soc_i/clk_o ] -divide_by 6
# # Set SPI flash clocks as mutually exclusive
# set_clock_groups -logically_exclusive -group SPI_MEMIO_FLASH_CLK -group SPI_HOST_FLASH_CLK

# Simplified version with one clock for both Yosis and OT SPIs
create_generated_clock [ get_pins u_core_v_mini_mcu/ao_peripheral_subsystem_i/spi_subsystem_i/spi_flash_sck_o ] \
                        -name SPI_FLASH_CLK -source [ get_pin u_heepatia_peripherals/u_fll_subsystem/clk_mux_fll_soc_i/clk_o ] -divide_by 2

# OT SPI host for external devices
create_generated_clock [ get_pins u_core_v_mini_mcu/peripheral_subsystem_i/spi_host_dma_i/cio_sck_o ] \
                        -name SPI_CLK -source [ get_pin u_heepatia_peripherals/u_fll_subsystem/clk_mux_fll_soc_i/clk_o ] -divide_by 2

# Set clock asynchronous
set_clock_groups -asynchronous -group JTAG_CLK
set_clock_groups -asynchronous -group REF_CLK
set_clock_groups -asynchronous -group FLL_CLK
set_clock_groups -asynchronous -group SPI_FLASH_CLK
set_clock_groups -asynchronous -group SPI_CLK

#############################################
#             PORTS CONSTRAINTS             #
#############################################

# 0 : rst_ni
set_false_path   -from [ get_ports rst_ni ]

##############################################
#           BOOT PORTS CONSTRAINTS           #
##############################################

# 1 : boot_select_i
# This is stable at design and never an output
set_false_path   -from [ get_ports boot_select_i ]

# 2 : execute_from_flash_i
# This is stable at design and never an output
set_false_path   -from [ get_ports execute_from_flash_i ]

##############################################
#           JTAG PORTS CONSTRAINTS           #
##############################################

# JTAG
set JTAG_ID_MIN 0.5
set JTAG_ID_MAX 0.8
# Example does the inverse for output min and max delay, but doc says the opposite.
set JTAG_OD_MIN 0.2
set JTAG_OD_MAX 0.3

# 3 : jtag_tck_i
# 4 : jtag_tms_i
set_input_delay  -min -clock JTAG_CLK [ expr $JTAG_CLK_PERIOD * $JTAG_ID_MIN ] [ get_ports jtag_tms_i ]
set_input_delay  -max -clock JTAG_CLK [ expr $JTAG_CLK_PERIOD * $JTAG_ID_MAX ] [ get_ports jtag_tms_i ]

# 5 : jtag_trst_ni
set_false_path   -from [ get_ports jtag_trst_ni ]

# 6 : jtag_tdi_i
set_input_delay  -min -clock JTAG_CLK [ expr $JTAG_CLK_PERIOD * $JTAG_ID_MIN ] [ get_ports jtag_tdi_i ]
set_input_delay  -max -clock JTAG_CLK [ expr $JTAG_CLK_PERIOD * $JTAG_ID_MAX ] [ get_ports jtag_tdi_i ]
set_false_path   -to [ get_ports jtag_tdi_i ]

# 7 : jtag_tdo_o
set_output_delay -min -clock JTAG_CLK [ expr $JTAG_CLK_PERIOD * $JTAG_OD_MIN ] [ get_ports jtag_tdo_o ]
set_output_delay -max -clock JTAG_CLK [ expr $JTAG_CLK_PERIOD * $JTAG_OD_MAX ] [ get_ports jtag_tdo_o ]
set_false_path   -from [ get_ports jtag_tdo_o ]

###############################################
#            I2C PORTS CONSTRAINTS            #
###############################################

# I2C module and requirements have not been evaluated yet
# It currently has the same external delays that the other GPIOs

# 38 : i2c_scl_io (mux gpio_30_io)
# 39 : i2c_sda_io (mux gpio_31_io)

###############################################
#         SPI FLASH PORTS CONSTRAINTS         #
###############################################

set SPI_FLASH_ID_MIN 0.2
set SPI_FLASH_ID_MAX 0.5
set SPI_FLASH_OD_MIN 0.2
set SPI_FLASH_OD_MAX 0.5

# 40 : spi_flash_sck_io

# 41 : spi_flash_cs_0_io
set_output_delay -min -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_OD_MIN ] [ get_ports spi_flash_cs_0_io ]
set_output_delay -max -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_OD_MAX ] [ get_ports spi_flash_cs_0_io ]

# 42 : spi_flash_sd_0_io
set_input_delay  -min -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_ID_MIN ] [ get_ports spi_flash_sd_0_io ]
set_input_delay  -max -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_ID_MAX ] [ get_ports spi_flash_sd_0_io ]
set_output_delay -min -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_OD_MIN ] [ get_ports spi_flash_sd_0_io ]
set_output_delay -max -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_OD_MAX ] [ get_ports spi_flash_sd_0_io ]

# 43 : spi_flash_sd_1_io
set_input_delay  -min -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_ID_MIN ] [ get_ports spi_flash_sd_1_io ]
set_input_delay  -max -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_ID_MAX ] [ get_ports spi_flash_sd_1_io ]
set_output_delay -min -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_OD_MIN ] [ get_ports spi_flash_sd_1_io ]
set_output_delay -max -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_OD_MAX ] [ get_ports spi_flash_sd_1_io ]

# 44 : spi_flash_sd_2_io
set_input_delay  -min -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_ID_MIN ] [ get_ports spi_flash_sd_2_io ]
set_input_delay  -max -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_ID_MAX ] [ get_ports spi_flash_sd_2_io ]
set_output_delay -min -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_OD_MIN ] [ get_ports spi_flash_sd_2_io ]
set_output_delay -max -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_OD_MAX ] [ get_ports spi_flash_sd_2_io ]

# 45 : spi_flash_sd_3_io
set_input_delay  -min -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_ID_MIN ] [ get_ports spi_flash_sd_3_io ]
set_input_delay  -max -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_ID_MAX ] [ get_ports spi_flash_sd_3_io ]
set_output_delay -min -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_OD_MIN ] [ get_ports spi_flash_sd_3_io ]
set_output_delay -max -clock SPI_FLASH_CLK [ expr $SPI_FLASH_CLK_PERIOD * $SPI_FLASH_OD_MAX ] [ get_ports spi_flash_sd_3_io ]

###############################################
#            SPI PORTS CONSTRAINTS            #
###############################################

set SPI_ID_MIN 0.2
set SPI_ID_MAX 0.5
set SPI_OD_MIN 0.2
set SPI_OD_MAX 0.5

# 46 : spi_sck_io

# 47 : spi_cs_0_io
set_output_delay -min -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MIN ] [ get_ports spi_cs_0_io ]
set_output_delay -max -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MAX ] [ get_ports spi_cs_0_io ]

# 48 : spi_cs_1_io
set_output_delay -min -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MIN ] [ get_ports spi_cs_1_io ]
set_output_delay -max -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MAX ] [ get_ports spi_cs_1_io ]

# 49 : spi_sd_0_io
set_input_delay  -min -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_ID_MIN ] [ get_ports spi_sd_0_io ]
set_input_delay  -max -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_ID_MAX ] [ get_ports spi_sd_0_io ]
set_output_delay -min -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MIN ] [ get_ports spi_sd_0_io ]
set_output_delay -max -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MAX ] [ get_ports spi_sd_0_io ]

# 50 : spi_sd_1_io
set_input_delay  -min -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_ID_MIN ] [ get_ports spi_sd_1_io ]
set_input_delay  -max -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_ID_MAX ] [ get_ports spi_sd_1_io ]
set_output_delay -min -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MIN ] [ get_ports spi_sd_1_io ]
set_output_delay -max -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MAX ] [ get_ports spi_sd_1_io ]

# 51 : spi_sd_2_io
set_input_delay  -min -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_ID_MIN ] [ get_ports spi_sd_2_io ]
set_input_delay  -max -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_ID_MAX ] [ get_ports spi_sd_2_io ]
set_output_delay -min -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MIN ] [ get_ports spi_sd_2_io ]
set_output_delay -max -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MAX ] [ get_ports spi_sd_2_io ]

# 52 : spi_sd_3_io
set_input_delay  -min -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_ID_MIN ] [ get_ports spi_sd_3_io ]
set_input_delay  -max -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_ID_MAX ] [ get_ports spi_sd_3_io ]
set_output_delay -min -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MIN ] [ get_ports spi_sd_3_io ]
set_output_delay -max -clock SPI_CLK [ expr $SPI_CLK_PERIOD * $SPI_OD_MAX ] [ get_ports spi_sd_3_io ]

###############################################
#            CLK PORTS CONSTRAINTS            #
###############################################

# 53 : ref_clk_i

# 54 : bypass_fll_i
# This is stable at runtime and never an output
set_false_path   -from [ get_ports bypass_fll_i ]
set_false_path   -to [ get_ports bypass_fll_i ]
set_case_analysis 0 [ get_ports bypass_fll_i ]

###############################################
#           SRAM CONSTRAINTS                  #
###############################################

# SRAM memories retention pin have a setup of -4.91ns while the clock period is 4ns so the path is relaxed to 2 cycles for setup
set_multicycle_path 2 -setup -through u_core_v_mini_mcu/ao_peripheral_subsystem_i/power_manager_i/memory_subsystem_banks_set_retentive_no*
set_multicycle_path 1 -hold -through u_core_v_mini_mcu/ao_peripheral_subsystem_i/power_manager_i/memory_subsystem_banks_set_retentive_no*

set_multicycle_path 2 -setup -through u_core_v_mini_mcu/ao_peripheral_subsystem_i/power_manager_i/external_ram_banks_set_retentive_no*
set_multicycle_path 1 -hold -through u_core_v_mini_mcu/ao_peripheral_subsystem_i/power_manager_i/external_ram_banks_set_retentive_no*

# ###############################################
# #           CGRA CONSTRAINTS                  #
# ###############################################

# set_multicycle_path 3 -setup -through u_heepatia_peripherals/cgra_top_wrapper_i/cgra_top_i/cgra_rcs_i/rc_row_gen[*].rc_col_gen[*].rc_i/rc_datapath/rc_alu/mult_read_gen[*].alu_mult_op*_i/d_i
# set_multicycle_path 2 -hold -through u_heepatia_peripherals/cgra_top_wrapper_i/cgra_top_i/cgra_rcs_i/rc_row_gen[*].rc_col_gen[*].rc_i/rc_datapath/rc_alu/mult_read_gen[*].alu_mult_op*_i/d_i

